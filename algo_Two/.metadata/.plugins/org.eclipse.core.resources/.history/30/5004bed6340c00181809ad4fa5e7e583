package algo.data.structures;

import java.util.LinkedList;

public class SingleLinkedList<T> {
	private static Node head;
	private static Node tail;
	int count = 0;
	
	
	//Witin the constructor i have to set head and tail to null and size to 0;

	public static void main(String[] args) {
		start = new Node(null, null);
		Node node = new Node(null,);
		Add();
	}

	// a. Add(T val) – puts a new value at the Tail end of the list
	public void Add(T val) {
		
	}

	// b Insert(T val, int index) – inserts a new value at a given index, pushing
	// the
	// existing value at that index to the next index spot, and so on.
	// Insert may ONLY target indices that are currently in use.
	// In other words, if you have 5 elements in your list, you may insert at any
	// index between 0 and 4 inclusive.
	// Index 5 would be considered out of bounds as it is not currently in use
	// during the insertion process.
	// Any index less than zero or equal to or greater than Count should throw an
	// index out of bounds exception.

	public void Insert(T val, int index) {

	}

	// c. Count – returns the number of values in the list. This should be a
	// property in C#, but a method in Java. For efficiency, the count value should
	// be a managed value (stored and updated as needed) and not simply derived each
	// time Count is called.

	public Integer Count() {
		return 0;
	}

	// d. Get(int index) – returns the value at the given index. Any index less than
	// zero or equal to or greater than Count should throw an index out of bounds
	// exception

	public T Get(int index) {
		return null;
	}

	// e. Remove – removes and returns the first value in the list
	public T Remove() {
		return null;
	}

	// f. RemoveAt(int index) –removes and returns the value at a given index. Any
	// index less than zero or equal to or greater than Count should throw an index
	// out of bounds exception.
	public T RemoveAt(int index) {
		return null;
	}

	// g. RemoveLast – removes and returns the last value in the list

	public T RemoveLast() {
		return null;
	}

	// h. ToString – an override method that creates and returns a string
	// representation of all the values in the list. The string must be in the
	// format of “v0, v1, v2, .., vn-1” where n-1 is the last index in the list. An
	// empty list should return an empty string (but not null). While every value in
	// the string is separated by a comma and space, the string must NOT have any
	// unnecessary commas or spaces at the beginning or end.

	// Override method
	public void ToString() {

	}

	// i. Clear – removes all values in the list.
	public void Clear() {

	}

	// j. Search(T val) – searches for a value in the list and returns the first
	// index of that value when found. If the key is not found in the list, the
	// method returns -1.
	public Integer Search(T val) {
		return 0;
	}
}
