package vora.priya.mazesolver;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;

public class MazeGeneration<T> {
	T start = null;
	T end = null;

	public static void main(String[] args) throws IOException {

		MazeGeneration<String> solver = new MazeGeneration<String>();
		solver.start(solver);
	}

	public void start(MazeGeneration<T> maze) throws IOException {
		this.getData();

	}

	private static String promptUserFilePath() {
		boolean endLoop = false;
		String path = null;
		while (endLoop == false) {
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Please enter a valid path to a file: \n");
			String line;
			try {
				line = br.readLine().trim();
				path = line;
				File file = new File(path);
				if (!file.isDirectory()) {
					if (file.exists()) {
						endLoop = true;
					}
				} else {
					endLoop = false;
				}
				// System.out.println("\nUser Path: " + path);
			} catch (IOException e) {

				endLoop = false;
				e.printStackTrace();
			}
		}
		return path;
	}

	private ArrayList<Node> getData() throws IOException {
		int lineCount = 0;
		String pathToFile = promptUserFilePath();
		File file = new File(pathToFile);

		BufferedReader br = new BufferedReader(new FileReader(file));
		ArrayList<Node> itemsList = new ArrayList<Node>();
		String st;
		boolean valid = false;
		int mazeCount = 2;
		int printCount = 0;
		while ((st = br.readLine()) != null) {

			if (!(st.contains("//"))) {
				if (printCount != 0) {
					st = st.trim();
				}
				System.out.println(st);
				if (st.isEmpty()) {
					System.out.println("------------");
					System.out.println("\nNew Maze: ");
					System.out.println("Maze # : " + mazeCount);
					System.out.println("-----");
					mazeCount++;
					lineCount = -1;
				} else {
					if (printCount == 0) {
						System.out.println("------------");
						System.out.println("\nNew Maze: ");
						System.out.println("Maze # : " + (mazeCount - 1));
						System.out.println("-----");
						System.out.println(st);
						printCount++;
					}
					///////////////////////////////////
					if (lineCount == 0) {
						String[] nodesList = st.split(",");
						for (String nodeValue : nodesList) {
							T val = (T) nodeValue;
							Node<T> node = new Node<T>(val);
							// addToMap(node.getVal());
							// System.out.println("Added To Map: " + node.getVal());
						}
					} else if (lineCount == 1) {
						T[] nodesList = (T[]) st.split(",");

						System.out.println(" Start: " + nodesList[0]);
						System.out.println(" End: " + nodesList[nodesList.length - 1]);
						start = nodesList[0];
						end = nodesList[nodesList.length - 1];
						valid = true;
					} else {
						T[] nodesList = (T[]) st.split(",");

						T source = nodesList[0];
						for (int i = 0; i < nodesList.length; i++) {
							if (i != 0) { // make relationships
								// this.makeGraph(source, nodesList[i]);
								// System.out.println("Edge added: " + source + " with: " + nodesList[i]);
							}
						}
					}

				}
				lineCount++;

			}

		}
		br.close();
		return itemsList;
	}
}
