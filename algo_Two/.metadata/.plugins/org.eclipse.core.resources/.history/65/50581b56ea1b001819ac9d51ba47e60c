import static org.junit.Assert.*;

import java.io.IOException;

import org.junit.Test;

import vora.priya.mazesolver.MazeSolver;

public class MazeTester {

	public MazeSolver<Integer> makeTestMap(MazeSolver<Integer> solver) {
		solver.addToMap(1);
		solver.addToMap(3);
		solver.addToMap(6);
		solver.addToMap(11);
		solver.addToMap(9);
		solver.addToMap(30);
		solver.addToMap(21);
		solver.addToMap(44);

		solver.makeGraph(1, 3);
		solver.makeGraph(3, 6);
		solver.makeGraph(3, 11);
		solver.makeGraph(9, 6);
		solver.makeGraph(30, 9);
		solver.makeGraph(21, 30);
//		solver.makeGraph(11, 21);
		return solver;
	}

	 @Test
	 public void testPathExist() throws IOException {
	 MazeSolver<Integer> solver = new MazeSolver<Integer>();
	 String expectedPath = "1 3";
	 solver = this.makeTestMap(solver);
	 System.out.println("\nPrinting Graph...");
	 System.out.println(solver.getNodeMap());
	
	 // Traverse the Maze
	 boolean hashPathBFS = solver.hasPath(1, 3);
	 System.out.println("STATE: " + hashPathBFS);
	 System.out
	 .println(hashPathBFS ? "Path Exist " + 1 + " " + 3 + " " : "Path does not exist " + 1 + " " + 3 + " ");
	
	 String shortPath = solver.findPath(1, 3);
	 assertEquals(expectedPath, shortPath);
	
	 }

	@Test
	public void testPathExist1() throws IOException {
		MazeSolver<Integer> solver = new MazeSolver<Integer>();
		String expectedPath = "1 3 6";
		solver = this.makeTestMap(solver);
		System.out.println("\nPrinting Graph...");
		System.out.println(solver.getNodeMap());

		// Traverse the Maze
		boolean hashPathBFS = solver.hasPath(1, 6);
		System.out.println("STATE: " + hashPathBFS);
		System.out
				.println(hashPathBFS ? "Path Exist " + 1 + " " + 6 + " " : "Path does not exist " + 1 + " " + 6 + " ");
		String shortPath = solver.findPath(1, 6);
		System.out.println("\n\nShort Path: " + shortPath);
		assertEquals(expectedPath, shortPath);
	}
	
	@Test
	public void testPathExist2() throws IOException {
		MazeSolver<Integer> solver = new MazeSolver<Integer>();
		String expectedPath = "1 3 6 9";
		solver = this.makeTestMap(solver);
		System.out.println("\nPrinting Graph...");
		System.out.println(solver.getNodeMap());

		// Traverse the Maze
		boolean hashPathBFS = solver.hasPath(1, 9);
		System.out.println("STATE: " + hashPathBFS);
		System.out.println(hashPathBFS ? "Path Exist " + 1 + " " + 9 + " " : "Path does not exist " + 1 + " " + 9 + " ");
		String shortPath = solver.findPath(1, 9);
		System.out.println("\n\nShort Path: " + shortPath);
		assertEquals(expectedPath, shortPath);
	}
	
	@Test 
	public void testLongerPath_1() { 
		MazeSolver<Integer> solver = new MazeSolver<Integer>();
		String expectedPath = "1 3 11";
		solver = this.makeTestMap(solver);
		System.out.println("\nPrinting Graph...");
		System.out.println(solver.getNodeMap());

		// Traverse the Maze
		boolean hashPathBFS = solver.hasPath(1, 11);
		System.out.println("STATE: " + hashPathBFS);
		System.out
				.println(hashPathBFS ? "Path Exist " + 1 + " " + 11 + " " : "Path does not exist " + 1 + " " + 11 + " ");
		String shortPath = solver.findPath(1, 11);
		System.out.println("\n\nShort Path: " + shortPath);
		assertEquals(expectedPath, shortPath);
	}

	// @Test
	// public void testPathExist2() throws IOException {
	// MazeSolver<Integer> solver = new MazeSolver<Integer>();
	//
	// solver = this.makeTestMap(solver);
	// System.out.println("\nPrinting Graph...");
	// System.out.println(solver.getNodeMap());
	//
	// // Traverse the Maze
	// boolean hashPathBFS = solver.hasPath(1, 9);
	// System.out.println("STATE: " + hashPathBFS);
	// System.out
	// .println(hashPathBFS ? "Path Exist " + 1 + " " + 9 + " " : "Path does not
	// exist " + 1 + " " + 9 + " ");
	// }
	//
	// @Test
	// public void testPathExistBackwards() throws IOException {
	// MazeSolver<Integer> solver = new MazeSolver<Integer>();
	//
	// solver = this.makeTestMap(solver);
	//
	// System.out.println("\nPrinting Graph...");
	// System.out.println(solver.getNodeMap());
	//
	// // Traverse the Maze
	// int val_one = 3;
	// int val_two = 1;
	// boolean hashPathBFS = solver.hasPath(val_one, val_two);
	// System.out.println("STATE: " + hashPathBFS);
	// System.out
	// .println(hashPathBFS ? "Path Exist " + 3 + " " + 1 + " " : "Path does not
	// exist " + +3 + " " + 1 + " ");
	// }

	// @Test
	// public void testPathExist_NonExistingNode() throws IOException {
	// boolean expectedCondition = false;
	// MazeSolver<Integer> solver = new MazeSolver<Integer>();
	//
	// solver = this.makeTestMap(solver);
	// System.out.println("\nPrinting Graph...");
	// System.out.println(solver.getNodeMap());
	//
	// // Traverse the Maze
	// boolean hashPathBFS = solver.hasPath(1, 22);
	// System.out.println("STATE: " + hashPathBFS);
	// System.out.println(
	// hashPathBFS ? "Path Exist " + 1 + " " + 22 + " " : "Path does not exist " + 1
	// + " " + 22 + " ");
	// assertEquals(expectedCondition, hashPathBFS);
	// }
	//
	// @Test
	// public void testPathExist_NonExistingNode2() throws IOException {
	// boolean expectedCondition = false;
	// MazeSolver<Integer> solver = new MazeSolver<Integer>();
	//
	// solver = this.makeTestMap(solver);
	// System.out.println("\nPrinting Graph...");
	// System.out.println(solver.getNodeMap());
	//
	// // Traverse the Maze
	// boolean hashPathBFS = solver.hasPath(1, 44);
	// System.out.println("STATE: " + hashPathBFS);
	// System.out.println(
	// hashPathBFS ? "Path Exist " + 1 + " " + 44 + " " : "Path does not exist " + 1
	// + " " + 44 + " ");
	// assertEquals(expectedCondition, hashPathBFS);
	// }

}
