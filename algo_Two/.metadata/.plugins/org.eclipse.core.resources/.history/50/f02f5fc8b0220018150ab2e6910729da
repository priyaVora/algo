import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class DijkstraAlgorithm<T> {
	Map<Node<T>, Node<T>> pathMap = new HashMap<Node<T>, Node<T>>();
	Map<Node<T>, Integer> distanceMap = new HashMap<Node<T>, Integer>();
	Map<Node<T>, Integer> leftOverNode = new HashMap<Node<T>, Integer>();

	public static void main(String[] args) {
		DijkstraAlgorithm<Character> algo = new DijkstraAlgorithm<Character>();
		Node<Character> nodeA = new Node<Character>("A");
		Node<Character> nodeB = new Node<Character>("B");
		Node<Character> nodeC = new Node<Character>("C");
		Node<Character> nodeD = new Node<Character>("D");
		Node<Character> nodeE = new Node<Character>("E");
		Node<Character> nodeF = new Node<Character>("F");

		System.out.println(nodeA.toString());
		System.out.println(nodeB.toString());
		System.out.println(nodeC.toString());
		System.out.println(nodeD.toString());
		System.out.println(nodeE.toString());
		System.out.println(nodeF.toString());
		System.out.println(" ");
		List<Node<Character>> listOfChar = new ArrayList<Node<Character>>();

		listOfChar.add(nodeA);
		listOfChar.add(nodeB);
		listOfChar.add(nodeC);
		listOfChar.add(nodeD);
		listOfChar.add(nodeE);
		listOfChar.add(nodeF);
		algo.resetLeftOverNodes(listOfChar, 'A');
		algo.hashMaps(algo.leftOverNode);

	}

	public void editPathMap(Node<T> node1, Node<T> node2) {
		
	}

	public void resetLeftOverNodes(List<Node<T>> nodesList, T srcChar) {
		for (Node<T> node : nodesList) {
			if (srcChar != node.getName()) {
				this.leftOverNode.put(node, Integer.MAX_VALUE);
			}

			if (node.getName().contains("" + srcChar)) {
				this.leftOverNode.put(node, 0);
			}
		}
	}

	public void hashMaps(Map<Node<T>, Integer> map) {
		System.out.println("Print Map: ");
		Iterator it = map.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry pair = (Map.Entry) it.next();
			Node<T> temp = (Node<T>) pair.getKey();
			System.out.println(temp.getName() + " = " + pair.getValue());
			it.remove(); // avoids a ConcurrentModificationException
		}
	}

	public void hashMapsNodes(Map<Node<T>, Node<T>> x) {

	}
}
